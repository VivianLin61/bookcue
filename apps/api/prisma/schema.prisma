generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator nestgraphql {
    provider                = "node node_modules/prisma-nestjs-graphql"
    output                  = "../src/generated-db-types"
    purgeOutput             = false
    combineScalarFilters    = true
    emitSingle              = true
    noAtomicOperations      = true
    // field validator
    fields_Validator_input  = true
    fields_Validator_output = true
    fields_Validator_model  = true
    fields_Validator_from   = "class-validator"
    // Args where|data nested validator
    decorate_1_type         = "*Args"
    decorate_1_field        = "@(data|where)"
    decorate_1_name         = ValidateNested
    decorate_1_from         = "class-validator"
    decorate_1_arguments    = "[]"
}

model User {
    id String @id @default(uuid())

    /// @Validator.IsEmail()
    email String @unique

    /// @Validator.IsString()
    /// @Validator.MaxLength(100)
    /// @Validator.MinLength(3)
    username String? @unique

    /// @Validator.IsString()
    /// @HideField()
    hashedPassword String?

    /// @Validator.IsString()
    name String?

    /// @Validator.IsString()
    location String?

    /// @Validator.IsString()
    bio String?

    /// @Validator.IsDate()
    dob                DateTime?
    /// @Validator.IsString()
    /// @HideField()
    hashedRefreshToken String?
    createdAt          DateTime   @default(now())
    updatedAt          DateTime   @updatedAt
    //  One to Many: one user has many user books
    userBooks          UserBook[]
    //  One to Many: one user has many shelves
    followers          Follows[]  @relation("follower")
    following          Follows[]  @relation("following")

    // AUTH
    image         String?
    emailVerified DateTime?
    accounts      Account[]
    reviews       Review[]
    auditLogs     AuditLog[]
    shelves       Shelf[]
}

model Follows {
    follower   User   @relation("follower", fields: [followerId], references: [id])
    followerId String

    following   User   @relation("following", fields: [followingId], references: [id])
    followingId String

    @@id([followerId, followingId])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Cover {
    id   String @id @default(uuid())
    url  String
    size SIZE

    bookId String?
    book   Book?   @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model Book {
    /// @Validator.IsString()
    id            String      @id @default(uuid())
    /// @Validator.IsString()
    slug          String      @unique
    /// @Validator.IsString()
    title         String
    /// @Validator.IsString()
    subtitle      String
    /// @Validator.ValidateNested()
    authors       Author[]
    /// @Validator.IsString()
    publishedDate String?
    /// @Validator.IsString()
    publisher     String?
    /// @Validator.IsString()
    description   String?
    /// @Validator.IsString()
    language      String?
    /// @Validator.IsInt()
    pageCount     Int?
    /// @Validator.ValidateNested()
    ratings       Rating[]
    /// @Validator.IsString()
    identifiers   Identifier?
    /// @Validator.ValidateNested()
    actvityLogs   AuditLog[]
    /// @Validator.ValidateNested()
    userBook      UserBook[]
    /// @Validator.ValidateNested()
    covers        Cover[]
    reviews       Review[]
}

model Author {
    id    String  @id @default(uuid())
    name  String
    bio   String?
    slug  String?
    books Book[] //books by the author
}

model Rating {
    id        String @id @default(uuid())
    source    String //'GOODREADS' | 'GOOGLE' | 'AMAZON' | 'OPEN_LIBRARY'
    maxRating Int
    rating    Int
    count     Int
    Book      Book[]
}

enum SIZE {
    SMALL
    MEDIUM
    LARGE
}

model Identifier {
    bookId      String  @unique
    book        Book?   @relation(fields: [bookId], references: [id])
    isbn10      String?
    isbn13      String?
    google      String?
    openLibrary String?
    goodreads   String?
    amazon      String?
}

model Review {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    content   String?
    tags      String[]
    /// @Validator.Min(0)
    /// @Validator.Max(5)
    /// @Validator.IsNumber()
    rating    Int?
    spoilers  Boolean  @default(false)
    userId    String?
    user      User?    @relation(fields: [userId], references: [id])
    Book      Book?    @relation(fields: [bookId], references: [id])
    bookId    String?

    // each user can only have one review per book
    @@unique(fields: [userId, bookId])
}

enum STATUS {
    WANT_TO_READ
    CURRENTLY_READING
    FINISHED
    DID_NOT_FINISH
    UP_NEXT
}

model UserBook {
    /// @Validator.IsString()
    id        String   @id @default(uuid())
    /// @Validator.IsString()
    userId    String
    /// @Validator.IsString()
    bookId    String
    // Many to One: many user books belong to one user when user is deleted all user books are deleted as well
    user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    // Many to One: many user books belong to one book when book
    book      Book?    @relation(fields: [bookId], references: [id], onDelete: Cascade)
    /// @Validator.ValidateNested()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    status            String
    order             Int
    shelves           UserBookShelves[]
    readingProgress   ReadingProgress?
    readingProgressId String
    readDates         ReadDate[]

    /// @Validator.IsString()
    /// @Validator.ValidateNested()
    @@unique(fields: [userId, bookId], name: "identifier")
}

model ReadingProgress {
    id         String        @id @default(uuid())
    /// @Validator.IsInt()
    capacity   Int
    /// @Validator.IsInt()
    progress   Int
    type       PROGRESS_TYPE
    createdAt  DateTime      @default(now())
    userBookId String        @unique
    userBook   UserBook      @relation(fields: [userBookId], references: [id])
}

enum PROGRESS_TYPE {
    PAGES
    PERCENTAGE
}

model ReadDate {
    id           String    @id @default(uuid())
    startDate    DateTime  @default(now())
    finishedDate DateTime?
    userBook     UserBook? @relation(fields: [userBookId], references: [id])
    userBookId   String?
}

model UserBookShelves {
    userBook   UserBook @relation(fields: [userBookId], references: [id], onDelete: Cascade)
    userBookId String

    shelf   Shelf  @relation(fields: [shelfId], references: [id], onDelete: Cascade)
    shelfId String

    @@id([userBookId, shelfId])
}

enum VISIBILITY {
    PRIVATE
    PUBLIC
}

model Shelf {
    /// @Validator.IsString()
    id          String            @id @default(uuid())
    /// @Validator.IsString()
    name        String
    /// @Validator.IsString()
    ownerId     String?
    /// @Validator.IsString()
    // Many to One: many shelves belong to one user when user is deleted all shelves are deleted as well
    owner       User?             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    description String?
    visibility  VISIBILITY        @default(PUBLIC)
    // Many to Many: a single shelf can be associated with multiple userBooks,
    userBooks   UserBookShelves[]

    /// @Validator.ValidateNested()
    // each user can only have one shelf with the same name
    @@unique(fields: [ownerId, name])
}

enum ACTION {
    REVIEW
    STATUS_UPDATE
    SHELVE
}

model AuditLog {
    id     String @id @unique @default(uuid())
    userId String
    user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

    action ACTION
    // BOOK the action was performed on
    bookId String
    book   Book?  @relation(fields: [bookId], references: [id])

    // ACTION content
    actionContent String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    id            String   @id @default(cuid())
    email         String
    existingEmail String
    token         String   @unique
    expires       DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}
