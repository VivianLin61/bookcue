generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator nestgraphql {
    provider                = "node node_modules/prisma-nestjs-graphql"
    output                  = "../src/generated-db-types"
    purgeOutput             = false
    combineScalarFilters    = true
    emitSingle              = true
    noAtomicOperations      = true
    // field validator
    fields_Validator_input  = true
    fields_Validator_output = true
    fields_Validator_model  = true
    fields_Validator_from   = "class-validator"
    // Args where|data nested validator
    decorate_1_type         = "*Args"
    decorate_1_field        = "@(data|where)"
    decorate_1_name         = ValidateNested
    decorate_1_from         = "class-validator"
    decorate_1_arguments    = "[]"
}

model User {
    id String @id @default(uuid())

    /// @Validator.IsEmail()
    email String @unique

    /// @Validator.IsString()
    /// @Validator.MaxLength(100)
    /// @Validator.MinLength(3)
    username String? @unique

    /// @Validator.IsString()
    /// @HideField()
    hashedPassword String?

    /// @Validator.IsString()
    /// @HideField()
    hashedRefreshToken String?
    createdAt          DateTime       @default(now())
    updatedAt          DateTime       @updatedAt
    //  One to Many: one user has many user books
    userBooks          UserBook[]
    //  One to Many: one user has many shelves
    shelves            Shelf[]
    journalEntries     JournalEntry[]
    following          User[]         @relation("UserFollows")
    followers          User[]         @relation("UserFollows")
    // favoriteBooks      Book[]         @relation("FavoritedBooks")
    reviews            Review[]
    likedReviews       Review[]       @relation(name: "LikedReviews")
    comments           Comment[]
    auditLogs          AuditLog[]
    // AUTH
    image              String?
    emailVerified      DateTime?
    accounts           Account[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Work {
    /// @Validator.IsString()
    id           String   @id @default(uuid())
    /// @Validator.IsString()
    title        String
    authors      Author[]
    /// @Validator.IsString()
    description  String?
    /// @Validator.IsString()
    categories   String[]
    /// @Validator.IsString()
    mainCategory String?

    averageRating Float?
    /// @Validator.IsInt()
    ratingsCount  Int?

    mainEditionId String?
    editions      Book[]
}

model Book {
    /// @Validator.IsString()
    id            String      @id @default(uuid())
    /// @Validator.IsString()
    title         String
    /// @Validator.IsString()
    authors       Author[]
    /// @Validator.IsString()
    publishedDate String?
    /// @Validator.IsString()
    publisher     String?
    /// @Validator.IsString()
    coverImage    String?
    /// @Validator.IsString()
    description   String?
    /// @Validator.IsString()
    language      String?
    /// @Validator.IsInt()
    pageCount     Int?
    /// @Validator.IsString()
    mainCategory  String?
    /// @Validator.IsString()
    identifier    Identifier?
    // One to Many: multiple users can own the same book
    /// @Validator.ValidateNested()
    userBook      UserBook[]
    reviews       Review[]
    logs          AuditLog[]

    work   Work?   @relation(fields: [workId], references: [id])
    workId String?
}

model Identifier {
    bookId      String  @id
    book        Book?   @relation(fields: [bookId], references: [id])
    isbn10      String?
    isbn13      String?
    googleBooks String?
    openLibrary String?
    goodreads   String?
    amazon      String?
}

model Author {
    id        String    @id @default(uuid())
    name      String
    bio       String?
    birthDate DateTime?
    deathDate DateTime?
    wikipedia String?
    photo     String?
    works     Work[]
    books     Book[]
}

model Review {
    id         String    @id @default(uuid())
    createdAt  DateTime  @default(now())
    content    String?
    userBook   UserBook? @relation(fields: [userBookId], references: [id])
    userBookId String?
    likeCount  Int       @default(0)
    likedBy    User[]    @relation("LikedReviews")
    spoilers   Boolean   @default(false)
    comments   Comment[]
    user       User?     @relation(fields: [userId], references: [id])
    userId     String?
    book       Book?     @relation(fields: [bookId], references: [id])
    bookId     String?

    @@unique(fields: [userId, bookId], name: "identifier")
}

model Comment {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    content   String?
    user      User?    @relation(fields: [userId], references: [id])
    userId    String?
    review    Review?  @relation(fields: [reviewId], references: [id])
    reviewId  String?
}

// Table stores all user books
//BookshelvesBook
model UserBook {
    /// @Validator.IsString()
    id        String   @id @default(uuid())
    /// @Validator.IsString()
    userId    String
    /// @Validator.IsString()
    bookId    String
    /// @Validator.IsString()
    status    String //WANT TO READ, READ, READING, DID NOT FINISH, UP NEXT
    /// @Validator.Min(0)
    /// @Validator.Max(5)
    /// @Validator.IsFloat()
    rating    Float?   @default(0)
    // Many to One: many user books belong to one user when user is deleted all user books are deleted as well
    user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    // Many to One: many user books belong to one book when book
    book      Book?    @relation(fields: [bookId], references: [id], onDelete: Cascade)
    /// @Validator.ValidateNested()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    shelves      UserBookShelves[]
    // One to Many: one user book has many journal entries
    journalEntry JournalEntry[]
    reviews      Review[]
    order        Int

    /// @Validator.IsString()
    /// @Validator.ValidateNested()
    @@unique(fields: [userId, bookId], name: "identifier")
}

model UserBookShelves {
    userBook   UserBook @relation(fields: [userBookId], references: [id], onDelete: Cascade)
    userBookId String
    shelf      Shelf    @relation(fields: [shelfId], references: [id], onDelete: Cascade)
    shelfId    String

    @@id([userBookId, shelfId])
}

model Shelf {
    /// @Validator.IsString()
    id        String            @id @default(uuid())
    /// @Validator.IsString()
    name      String
    /// @Validator.IsString()
    userId    String?
    dateTime  String?
    // Many to One: many shelves belong to one user when user is deleted all shelves are deleted as well
    user      User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
    // Many to Many: a single shelf can be associated with multiple userBooks,
    userBooks UserBookShelves[]

    /// @Validator.IsString()
    /// @Validator.ValidateNested()
    @@unique(fields: [userId, name], name: "identifier")
}

model JournalEntry {
    id             String    @id @default(uuid())
    /// @Validator.IsString()
    readingNotes   String?
    dateRead       DateTime  @default(now())
    createdAt      DateTime  @default(now())
    /// @Validator.IsInt()
    currentPage    Int
    /// @Validator.IsInt()
    pagesRead      Int
    /// @Validator.Min(0)
    /// @Validator.Max(100)
    /// @Validator.IsInt()
    currentPercent Int
    /// @Validator.IsString()
    userId         String?
    user           User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
    /// @Validator.IsString()
    userBookId     String?
    // Many to One: many journal entries belong to one user book when user book is deleted all journal entries are deleted as well
    userBook       UserBook? @relation(fields: [userBookId], references: [id], onDelete: Cascade)
}

enum ACTION {
    REVIEW
    COMMENT
    STATUS_UPDATE
    LIKE
    RATE
    LOG
    SHELVE
}

model AuditLog {
    id     String @id @default(uuid())
    userId String
    user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

    action ACTION
    // BOOK the action was performed on
    bookId String
    book   Book?  @relation(fields: [bookId], references: [id])

    // ACTION content
    actionContent String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    id            String   @id @default(cuid())
    email         String
    existingEmail String
    token         String   @unique
    expires       DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}
