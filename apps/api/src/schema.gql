# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthResponse {
  accessToken: String!
  expiresIn: Float!
  refreshToken: String!
  user: User!
}

type Book {
  _count: BookCount!
  author: String
  categories: String
  comments: [Comment!]
  coverImage: String
  description: String
  id: ID!
  pageCount: Int
  pubDate: String
  publisher: String
  reviews: [Review!]
  title: String!
  userBook: [UserBook!]
}

type BookAvgAggregate {
  pageCount: Float
}

type BookCount {
  comments: Int!
  reviews: Int!
  userBook: Int!
}

type BookCountAggregate {
  _all: Int!
  author: Int!
  categories: Int!
  coverImage: Int!
  description: Int!
  id: Int!
  pageCount: Int!
  pubDate: Int!
  publisher: Int!
  title: Int!
}

input BookCreateInput {
  author: String
  categories: String
  comments: CommentCreateNestedManyWithoutBookInput
  coverImage: String
  description: String
  id: String!
  pageCount: Int
  pubDate: String
  publisher: String
  reviews: ReviewCreateNestedManyWithoutBookInput
  title: String!
  userBook: UserBookCreateNestedManyWithoutBookInput
}

input BookCreateNestedOneWithoutCommentsInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutCommentsInput
  create: BookCreateWithoutCommentsInput
}

input BookCreateNestedOneWithoutReviewsInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutReviewsInput
  create: BookCreateWithoutReviewsInput
}

input BookCreateNestedOneWithoutUserBookInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutUserBookInput
  create: BookCreateWithoutUserBookInput
}

input BookCreateOrConnectWithoutCommentsInput {
  create: BookCreateWithoutCommentsInput!
  where: BookWhereUniqueInput!
}

input BookCreateOrConnectWithoutReviewsInput {
  create: BookCreateWithoutReviewsInput!
  where: BookWhereUniqueInput!
}

input BookCreateOrConnectWithoutUserBookInput {
  create: BookCreateWithoutUserBookInput!
  where: BookWhereUniqueInput!
}

input BookCreateWithoutCommentsInput {
  author: String
  categories: String
  coverImage: String
  description: String
  id: String!
  pageCount: Int
  pubDate: String
  publisher: String
  reviews: ReviewCreateNestedManyWithoutBookInput
  title: String!
  userBook: UserBookCreateNestedManyWithoutBookInput
}

input BookCreateWithoutReviewsInput {
  author: String
  categories: String
  comments: CommentCreateNestedManyWithoutBookInput
  coverImage: String
  description: String
  id: String!
  pageCount: Int
  pubDate: String
  publisher: String
  title: String!
  userBook: UserBookCreateNestedManyWithoutBookInput
}

input BookCreateWithoutUserBookInput {
  author: String
  categories: String
  comments: CommentCreateNestedManyWithoutBookInput
  coverImage: String
  description: String
  id: String!
  pageCount: Int
  pubDate: String
  publisher: String
  reviews: ReviewCreateNestedManyWithoutBookInput
  title: String!
}

type BookMaxAggregate {
  author: String
  categories: String
  coverImage: String
  description: String
  id: String
  pageCount: Int
  pubDate: String
  publisher: String
  title: String
}

type BookMinAggregate {
  author: String
  categories: String
  coverImage: String
  description: String
  id: String
  pageCount: Int
  pubDate: String
  publisher: String
  title: String
}

input BookOrderByWithRelationInput {
  author: SortOrderInput
  categories: SortOrderInput
  comments: CommentOrderByRelationAggregateInput
  coverImage: SortOrderInput
  description: SortOrderInput
  id: SortOrder
  pageCount: SortOrderInput
  pubDate: SortOrderInput
  publisher: SortOrderInput
  reviews: ReviewOrderByRelationAggregateInput
  title: SortOrder
  userBook: UserBookOrderByRelationAggregateInput
}

input BookRelationFilter {
  is: BookWhereInput
  isNot: BookWhereInput
}

type BookSumAggregate {
  pageCount: Int
}

input BookUpdateOneWithoutCommentsNestedInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutCommentsInput
  create: BookCreateWithoutCommentsInput
  delete: BookWhereInput
  disconnect: BookWhereInput
  update: BookUpdateToOneWithWhereWithoutCommentsInput
  upsert: BookUpsertWithoutCommentsInput
}

input BookUpdateOneWithoutReviewsNestedInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutReviewsInput
  create: BookCreateWithoutReviewsInput
  delete: BookWhereInput
  disconnect: BookWhereInput
  update: BookUpdateToOneWithWhereWithoutReviewsInput
  upsert: BookUpsertWithoutReviewsInput
}

input BookUpdateOneWithoutUserBookNestedInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutUserBookInput
  create: BookCreateWithoutUserBookInput
  delete: BookWhereInput
  disconnect: BookWhereInput
  update: BookUpdateToOneWithWhereWithoutUserBookInput
  upsert: BookUpsertWithoutUserBookInput
}

input BookUpdateToOneWithWhereWithoutCommentsInput {
  data: BookUpdateWithoutCommentsInput!
  where: BookWhereInput
}

input BookUpdateToOneWithWhereWithoutReviewsInput {
  data: BookUpdateWithoutReviewsInput!
  where: BookWhereInput
}

input BookUpdateToOneWithWhereWithoutUserBookInput {
  data: BookUpdateWithoutUserBookInput!
  where: BookWhereInput
}

input BookUpdateWithoutCommentsInput {
  author: String
  categories: String
  coverImage: String
  description: String
  id: String
  pageCount: Int
  pubDate: String
  publisher: String
  reviews: ReviewUpdateManyWithoutBookNestedInput
  title: String
  userBook: UserBookUpdateManyWithoutBookNestedInput
}

input BookUpdateWithoutReviewsInput {
  author: String
  categories: String
  comments: CommentUpdateManyWithoutBookNestedInput
  coverImage: String
  description: String
  id: String
  pageCount: Int
  pubDate: String
  publisher: String
  title: String
  userBook: UserBookUpdateManyWithoutBookNestedInput
}

input BookUpdateWithoutUserBookInput {
  author: String
  categories: String
  comments: CommentUpdateManyWithoutBookNestedInput
  coverImage: String
  description: String
  id: String
  pageCount: Int
  pubDate: String
  publisher: String
  reviews: ReviewUpdateManyWithoutBookNestedInput
  title: String
}

input BookUpsertWithoutCommentsInput {
  create: BookCreateWithoutCommentsInput!
  update: BookUpdateWithoutCommentsInput!
  where: BookWhereInput
}

input BookUpsertWithoutReviewsInput {
  create: BookCreateWithoutReviewsInput!
  update: BookUpdateWithoutReviewsInput!
  where: BookWhereInput
}

input BookUpsertWithoutUserBookInput {
  create: BookCreateWithoutUserBookInput!
  update: BookUpdateWithoutUserBookInput!
  where: BookWhereInput
}

input BookWhereInput {
  AND: [BookWhereInput!]
  NOT: [BookWhereInput!]
  OR: [BookWhereInput!]
  author: StringFilter
  categories: StringFilter
  comments: CommentListRelationFilter
  coverImage: StringFilter
  description: StringFilter
  id: StringFilter
  pageCount: IntFilter
  pubDate: StringFilter
  publisher: StringFilter
  reviews: ReviewListRelationFilter
  title: StringFilter
  userBook: UserBookListRelationFilter
}

input BookWhereUniqueInput {
  AND: [BookWhereInput!]
  NOT: [BookWhereInput!]
  OR: [BookWhereInput!]
  author: StringFilter
  categories: StringFilter
  comments: CommentListRelationFilter
  coverImage: StringFilter
  description: StringFilter
  id: String
  pageCount: IntFilter
  pubDate: StringFilter
  publisher: StringFilter
  reviews: ReviewListRelationFilter
  title: StringFilter
  userBook: UserBookListRelationFilter
}

input BoolFilter {
  equals: Boolean
  not: BoolFilter
}

type Comment {
  book: Book
  bookId: String
  content: String
  createdAt: Timestamp!
  id: ID!
  review: Review
  reviewId: String
  user: User
  userId: String
}

type CommentCountAggregate {
  _all: Int!
  bookId: Int!
  content: Int!
  createdAt: Int!
  id: Int!
  reviewId: Int!
  userId: Int!
}

input CommentCreateManyBookInput {
  content: String
  createdAt: Timestamp
  id: String
  reviewId: String
  userId: String
}

input CommentCreateManyBookInputEnvelope {
  data: [CommentCreateManyBookInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyReviewInput {
  bookId: String
  content: String
  createdAt: Timestamp
  id: String
  userId: String
}

input CommentCreateManyReviewInputEnvelope {
  data: [CommentCreateManyReviewInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyUserInput {
  bookId: String
  content: String
  createdAt: Timestamp
  id: String
  reviewId: String
}

input CommentCreateManyUserInputEnvelope {
  data: [CommentCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input CommentCreateNestedManyWithoutBookInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutBookInput!]
  create: [CommentCreateWithoutBookInput!]
  createMany: CommentCreateManyBookInputEnvelope
}

input CommentCreateNestedManyWithoutReviewInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutReviewInput!]
  create: [CommentCreateWithoutReviewInput!]
  createMany: CommentCreateManyReviewInputEnvelope
}

input CommentCreateNestedManyWithoutUserInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutUserInput!]
  create: [CommentCreateWithoutUserInput!]
  createMany: CommentCreateManyUserInputEnvelope
}

input CommentCreateOrConnectWithoutBookInput {
  create: CommentCreateWithoutBookInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutReviewInput {
  create: CommentCreateWithoutReviewInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutUserInput {
  create: CommentCreateWithoutUserInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateWithoutBookInput {
  content: String
  createdAt: Timestamp
  id: String
  review: ReviewCreateNestedOneWithoutCommentsInput
  user: UserCreateNestedOneWithoutCommentsInput
}

input CommentCreateWithoutReviewInput {
  book: BookCreateNestedOneWithoutCommentsInput
  content: String
  createdAt: Timestamp
  id: String
  user: UserCreateNestedOneWithoutCommentsInput
}

input CommentCreateWithoutUserInput {
  book: BookCreateNestedOneWithoutCommentsInput
  content: String
  createdAt: Timestamp
  id: String
  review: ReviewCreateNestedOneWithoutCommentsInput
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

type CommentMaxAggregate {
  bookId: String
  content: String
  createdAt: Timestamp
  id: String
  reviewId: String
  userId: String
}

type CommentMinAggregate {
  bookId: String
  content: String
  createdAt: Timestamp
  id: String
  reviewId: String
  userId: String
}

input CommentOrderByRelationAggregateInput {
  _count: SortOrder
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  bookId: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  reviewId: StringFilter
  userId: StringFilter
}

input CommentUpdateManyMutationInput {
  content: String
  createdAt: Timestamp
  id: String
}

input CommentUpdateManyWithWhereWithoutBookInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutReviewInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutUserInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithoutBookNestedInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutBookInput!]
  create: [CommentCreateWithoutBookInput!]
  createMany: CommentCreateManyBookInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutBookInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutBookInput!]
}

input CommentUpdateManyWithoutReviewNestedInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutReviewInput!]
  create: [CommentCreateWithoutReviewInput!]
  createMany: CommentCreateManyReviewInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutReviewInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutReviewInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutReviewInput!]
}

input CommentUpdateManyWithoutUserNestedInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutUserInput!]
  create: [CommentCreateWithoutUserInput!]
  createMany: CommentCreateManyUserInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutUserInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutUserInput!]
}

input CommentUpdateWithWhereUniqueWithoutBookInput {
  data: CommentUpdateWithoutBookInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutReviewInput {
  data: CommentUpdateWithoutReviewInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutUserInput {
  data: CommentUpdateWithoutUserInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithoutBookInput {
  content: String
  createdAt: Timestamp
  id: String
  review: ReviewUpdateOneWithoutCommentsNestedInput
  user: UserUpdateOneWithoutCommentsNestedInput
}

input CommentUpdateWithoutReviewInput {
  book: BookUpdateOneWithoutCommentsNestedInput
  content: String
  createdAt: Timestamp
  id: String
  user: UserUpdateOneWithoutCommentsNestedInput
}

input CommentUpdateWithoutUserInput {
  book: BookUpdateOneWithoutCommentsNestedInput
  content: String
  createdAt: Timestamp
  id: String
  review: ReviewUpdateOneWithoutCommentsNestedInput
}

input CommentUpsertWithWhereUniqueWithoutBookInput {
  create: CommentCreateWithoutBookInput!
  update: CommentUpdateWithoutBookInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutReviewInput {
  create: CommentCreateWithoutReviewInput!
  update: CommentUpdateWithoutReviewInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutUserInput {
  create: CommentCreateWithoutUserInput!
  update: CommentUpdateWithoutUserInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  book: BookRelationFilter
  bookId: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  review: ReviewRelationFilter
  reviewId: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input CommentWhereUniqueInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  book: BookRelationFilter
  bookId: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: String
  review: ReviewRelationFilter
  reviewId: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input DateTimeFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: DateTimeFilter
  notIn: [Timestamp!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: IntFilter
  notIn: [Int!]
}

type JournalEntry {
  createdAt: Timestamp!
  currentPage: Int!
  currentPercent: Int!
  dateRead: Timestamp!
  id: ID!
  pagesRead: Int!
  readingNotes: String
  user: User
  userBook: UserBook
  userBookId: String
  userId: String
}

type JournalEntryAvgAggregate {
  currentPage: Float
  currentPercent: Float
  pagesRead: Float
}

type JournalEntryCountAggregate {
  _all: Int!
  createdAt: Int!
  currentPage: Int!
  currentPercent: Int!
  dateRead: Int!
  id: Int!
  pagesRead: Int!
  readingNotes: Int!
  userBookId: Int!
  userId: Int!
}

input JournalEntryCreateInput {
  createdAt: Timestamp
  currentPage: Int!
  currentPercent: Int!
  dateRead: Timestamp
  id: String
  pagesRead: Int!
  readingNotes: String
  user: UserCreateNestedOneWithoutJournalEntriesInput
  userBook: UserBookCreateNestedOneWithoutJournalEntryInput
}

input JournalEntryCreateManyUserBookInput {
  createdAt: Timestamp
  currentPage: Int!
  currentPercent: Int!
  dateRead: Timestamp
  id: String
  pagesRead: Int!
  readingNotes: String
  userId: String
}

input JournalEntryCreateManyUserBookInputEnvelope {
  data: [JournalEntryCreateManyUserBookInput!]!
  skipDuplicates: Boolean
}

input JournalEntryCreateManyUserInput {
  createdAt: Timestamp
  currentPage: Int!
  currentPercent: Int!
  dateRead: Timestamp
  id: String
  pagesRead: Int!
  readingNotes: String
  userBookId: String
}

input JournalEntryCreateManyUserInputEnvelope {
  data: [JournalEntryCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input JournalEntryCreateNestedManyWithoutUserBookInput {
  connect: [JournalEntryWhereUniqueInput!]
  connectOrCreate: [JournalEntryCreateOrConnectWithoutUserBookInput!]
  create: [JournalEntryCreateWithoutUserBookInput!]
  createMany: JournalEntryCreateManyUserBookInputEnvelope
}

input JournalEntryCreateNestedManyWithoutUserInput {
  connect: [JournalEntryWhereUniqueInput!]
  connectOrCreate: [JournalEntryCreateOrConnectWithoutUserInput!]
  create: [JournalEntryCreateWithoutUserInput!]
  createMany: JournalEntryCreateManyUserInputEnvelope
}

input JournalEntryCreateOrConnectWithoutUserBookInput {
  create: JournalEntryCreateWithoutUserBookInput!
  where: JournalEntryWhereUniqueInput!
}

input JournalEntryCreateOrConnectWithoutUserInput {
  create: JournalEntryCreateWithoutUserInput!
  where: JournalEntryWhereUniqueInput!
}

input JournalEntryCreateWithoutUserBookInput {
  createdAt: Timestamp
  currentPage: Int!
  currentPercent: Int!
  dateRead: Timestamp
  id: String
  pagesRead: Int!
  readingNotes: String
  user: UserCreateNestedOneWithoutJournalEntriesInput
}

input JournalEntryCreateWithoutUserInput {
  createdAt: Timestamp
  currentPage: Int!
  currentPercent: Int!
  dateRead: Timestamp
  id: String
  pagesRead: Int!
  readingNotes: String
  userBook: UserBookCreateNestedOneWithoutJournalEntryInput
}

input JournalEntryListRelationFilter {
  every: JournalEntryWhereInput
  none: JournalEntryWhereInput
  some: JournalEntryWhereInput
}

type JournalEntryMaxAggregate {
  createdAt: Timestamp
  currentPage: Int
  currentPercent: Int
  dateRead: Timestamp
  id: String
  pagesRead: Int
  readingNotes: String
  userBookId: String
  userId: String
}

type JournalEntryMinAggregate {
  createdAt: Timestamp
  currentPage: Int
  currentPercent: Int
  dateRead: Timestamp
  id: String
  pagesRead: Int
  readingNotes: String
  userBookId: String
  userId: String
}

input JournalEntryOrderByRelationAggregateInput {
  _count: SortOrder
}

input JournalEntryScalarWhereInput {
  AND: [JournalEntryScalarWhereInput!]
  NOT: [JournalEntryScalarWhereInput!]
  OR: [JournalEntryScalarWhereInput!]
  createdAt: DateTimeFilter
  currentPage: IntFilter
  currentPercent: IntFilter
  dateRead: DateTimeFilter
  id: StringFilter
  pagesRead: IntFilter
  readingNotes: StringFilter
  userBookId: StringFilter
  userId: StringFilter
}

type JournalEntrySumAggregate {
  currentPage: Int
  currentPercent: Int
  pagesRead: Int
}

input JournalEntryUpdateInput {
  createdAt: Timestamp
  currentPage: Int
  currentPercent: Int
  dateRead: Timestamp
  id: String
  pagesRead: Int
  readingNotes: String
  user: UserUpdateOneWithoutJournalEntriesNestedInput
  userBook: UserBookUpdateOneWithoutJournalEntryNestedInput
}

input JournalEntryUpdateManyMutationInput {
  createdAt: Timestamp
  currentPage: Int
  currentPercent: Int
  dateRead: Timestamp
  id: String
  pagesRead: Int
  readingNotes: String
}

input JournalEntryUpdateManyWithWhereWithoutUserBookInput {
  data: JournalEntryUpdateManyMutationInput!
  where: JournalEntryScalarWhereInput!
}

input JournalEntryUpdateManyWithWhereWithoutUserInput {
  data: JournalEntryUpdateManyMutationInput!
  where: JournalEntryScalarWhereInput!
}

input JournalEntryUpdateManyWithoutUserBookNestedInput {
  connect: [JournalEntryWhereUniqueInput!]
  connectOrCreate: [JournalEntryCreateOrConnectWithoutUserBookInput!]
  create: [JournalEntryCreateWithoutUserBookInput!]
  createMany: JournalEntryCreateManyUserBookInputEnvelope
  delete: [JournalEntryWhereUniqueInput!]
  deleteMany: [JournalEntryScalarWhereInput!]
  disconnect: [JournalEntryWhereUniqueInput!]
  set: [JournalEntryWhereUniqueInput!]
  update: [JournalEntryUpdateWithWhereUniqueWithoutUserBookInput!]
  updateMany: [JournalEntryUpdateManyWithWhereWithoutUserBookInput!]
  upsert: [JournalEntryUpsertWithWhereUniqueWithoutUserBookInput!]
}

input JournalEntryUpdateManyWithoutUserNestedInput {
  connect: [JournalEntryWhereUniqueInput!]
  connectOrCreate: [JournalEntryCreateOrConnectWithoutUserInput!]
  create: [JournalEntryCreateWithoutUserInput!]
  createMany: JournalEntryCreateManyUserInputEnvelope
  delete: [JournalEntryWhereUniqueInput!]
  deleteMany: [JournalEntryScalarWhereInput!]
  disconnect: [JournalEntryWhereUniqueInput!]
  set: [JournalEntryWhereUniqueInput!]
  update: [JournalEntryUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [JournalEntryUpdateManyWithWhereWithoutUserInput!]
  upsert: [JournalEntryUpsertWithWhereUniqueWithoutUserInput!]
}

input JournalEntryUpdateWithWhereUniqueWithoutUserBookInput {
  data: JournalEntryUpdateWithoutUserBookInput!
  where: JournalEntryWhereUniqueInput!
}

input JournalEntryUpdateWithWhereUniqueWithoutUserInput {
  data: JournalEntryUpdateWithoutUserInput!
  where: JournalEntryWhereUniqueInput!
}

input JournalEntryUpdateWithoutUserBookInput {
  createdAt: Timestamp
  currentPage: Int
  currentPercent: Int
  dateRead: Timestamp
  id: String
  pagesRead: Int
  readingNotes: String
  user: UserUpdateOneWithoutJournalEntriesNestedInput
}

input JournalEntryUpdateWithoutUserInput {
  createdAt: Timestamp
  currentPage: Int
  currentPercent: Int
  dateRead: Timestamp
  id: String
  pagesRead: Int
  readingNotes: String
  userBook: UserBookUpdateOneWithoutJournalEntryNestedInput
}

input JournalEntryUpsertWithWhereUniqueWithoutUserBookInput {
  create: JournalEntryCreateWithoutUserBookInput!
  update: JournalEntryUpdateWithoutUserBookInput!
  where: JournalEntryWhereUniqueInput!
}

input JournalEntryUpsertWithWhereUniqueWithoutUserInput {
  create: JournalEntryCreateWithoutUserInput!
  update: JournalEntryUpdateWithoutUserInput!
  where: JournalEntryWhereUniqueInput!
}

input JournalEntryWhereInput {
  AND: [JournalEntryWhereInput!]
  NOT: [JournalEntryWhereInput!]
  OR: [JournalEntryWhereInput!]
  createdAt: DateTimeFilter
  currentPage: IntFilter
  currentPercent: IntFilter
  dateRead: DateTimeFilter
  id: StringFilter
  pagesRead: IntFilter
  readingNotes: StringFilter
  user: UserRelationFilter
  userBook: UserBookRelationFilter
  userBookId: StringFilter
  userId: StringFilter
}

input JournalEntryWhereUniqueInput {
  AND: [JournalEntryWhereInput!]
  NOT: [JournalEntryWhereInput!]
  OR: [JournalEntryWhereInput!]
  createdAt: DateTimeFilter
  currentPage: IntFilter
  currentPercent: IntFilter
  dateRead: DateTimeFilter
  id: String
  pagesRead: IntFilter
  readingNotes: StringFilter
  user: UserRelationFilter
  userBook: UserBookRelationFilter
  userBookId: StringFilter
  userId: StringFilter
}

type LikedReview {
  id: ID!
  likedAt: Timestamp!
  review: Review!
  reviewId: String!
  user: User
  userId: String
}

type LikedReviewAvgAggregate {
  id: Float
}

type LikedReviewCountAggregate {
  _all: Int!
  id: Int!
  likedAt: Int!
  reviewId: Int!
  userId: Int!
}

input LikedReviewCreateManyReviewInput {
  id: Int
  likedAt: Timestamp
  userId: String
}

input LikedReviewCreateManyReviewInputEnvelope {
  data: [LikedReviewCreateManyReviewInput!]!
  skipDuplicates: Boolean
}

input LikedReviewCreateManyUserInput {
  id: Int
  likedAt: Timestamp
  reviewId: String!
}

input LikedReviewCreateManyUserInputEnvelope {
  data: [LikedReviewCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input LikedReviewCreateNestedManyWithoutReviewInput {
  connect: [LikedReviewWhereUniqueInput!]
  connectOrCreate: [LikedReviewCreateOrConnectWithoutReviewInput!]
  create: [LikedReviewCreateWithoutReviewInput!]
  createMany: LikedReviewCreateManyReviewInputEnvelope
}

input LikedReviewCreateNestedManyWithoutUserInput {
  connect: [LikedReviewWhereUniqueInput!]
  connectOrCreate: [LikedReviewCreateOrConnectWithoutUserInput!]
  create: [LikedReviewCreateWithoutUserInput!]
  createMany: LikedReviewCreateManyUserInputEnvelope
}

input LikedReviewCreateOrConnectWithoutReviewInput {
  create: LikedReviewCreateWithoutReviewInput!
  where: LikedReviewWhereUniqueInput!
}

input LikedReviewCreateOrConnectWithoutUserInput {
  create: LikedReviewCreateWithoutUserInput!
  where: LikedReviewWhereUniqueInput!
}

input LikedReviewCreateWithoutReviewInput {
  likedAt: Timestamp
  user: UserCreateNestedOneWithoutLikedReviewsInput
}

input LikedReviewCreateWithoutUserInput {
  likedAt: Timestamp
  review: ReviewCreateNestedOneWithoutLikesInput!
}

input LikedReviewListRelationFilter {
  every: LikedReviewWhereInput
  none: LikedReviewWhereInput
  some: LikedReviewWhereInput
}

type LikedReviewMaxAggregate {
  id: Int
  likedAt: Timestamp
  reviewId: String
  userId: String
}

type LikedReviewMinAggregate {
  id: Int
  likedAt: Timestamp
  reviewId: String
  userId: String
}

input LikedReviewOrderByRelationAggregateInput {
  _count: SortOrder
}

input LikedReviewScalarWhereInput {
  AND: [LikedReviewScalarWhereInput!]
  NOT: [LikedReviewScalarWhereInput!]
  OR: [LikedReviewScalarWhereInput!]
  id: IntFilter
  likedAt: DateTimeFilter
  reviewId: StringFilter
  userId: StringFilter
}

type LikedReviewSumAggregate {
  id: Int
}

input LikedReviewUpdateManyMutationInput {
  likedAt: Timestamp
}

input LikedReviewUpdateManyWithWhereWithoutReviewInput {
  data: LikedReviewUpdateManyMutationInput!
  where: LikedReviewScalarWhereInput!
}

input LikedReviewUpdateManyWithWhereWithoutUserInput {
  data: LikedReviewUpdateManyMutationInput!
  where: LikedReviewScalarWhereInput!
}

input LikedReviewUpdateManyWithoutReviewNestedInput {
  connect: [LikedReviewWhereUniqueInput!]
  connectOrCreate: [LikedReviewCreateOrConnectWithoutReviewInput!]
  create: [LikedReviewCreateWithoutReviewInput!]
  createMany: LikedReviewCreateManyReviewInputEnvelope
  delete: [LikedReviewWhereUniqueInput!]
  deleteMany: [LikedReviewScalarWhereInput!]
  disconnect: [LikedReviewWhereUniqueInput!]
  set: [LikedReviewWhereUniqueInput!]
  update: [LikedReviewUpdateWithWhereUniqueWithoutReviewInput!]
  updateMany: [LikedReviewUpdateManyWithWhereWithoutReviewInput!]
  upsert: [LikedReviewUpsertWithWhereUniqueWithoutReviewInput!]
}

input LikedReviewUpdateManyWithoutUserNestedInput {
  connect: [LikedReviewWhereUniqueInput!]
  connectOrCreate: [LikedReviewCreateOrConnectWithoutUserInput!]
  create: [LikedReviewCreateWithoutUserInput!]
  createMany: LikedReviewCreateManyUserInputEnvelope
  delete: [LikedReviewWhereUniqueInput!]
  deleteMany: [LikedReviewScalarWhereInput!]
  disconnect: [LikedReviewWhereUniqueInput!]
  set: [LikedReviewWhereUniqueInput!]
  update: [LikedReviewUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [LikedReviewUpdateManyWithWhereWithoutUserInput!]
  upsert: [LikedReviewUpsertWithWhereUniqueWithoutUserInput!]
}

input LikedReviewUpdateWithWhereUniqueWithoutReviewInput {
  data: LikedReviewUpdateWithoutReviewInput!
  where: LikedReviewWhereUniqueInput!
}

input LikedReviewUpdateWithWhereUniqueWithoutUserInput {
  data: LikedReviewUpdateWithoutUserInput!
  where: LikedReviewWhereUniqueInput!
}

input LikedReviewUpdateWithoutReviewInput {
  likedAt: Timestamp
  user: UserUpdateOneWithoutLikedReviewsNestedInput
}

input LikedReviewUpdateWithoutUserInput {
  likedAt: Timestamp
  review: ReviewUpdateOneRequiredWithoutLikesNestedInput
}

input LikedReviewUpsertWithWhereUniqueWithoutReviewInput {
  create: LikedReviewCreateWithoutReviewInput!
  update: LikedReviewUpdateWithoutReviewInput!
  where: LikedReviewWhereUniqueInput!
}

input LikedReviewUpsertWithWhereUniqueWithoutUserInput {
  create: LikedReviewCreateWithoutUserInput!
  update: LikedReviewUpdateWithoutUserInput!
  where: LikedReviewWhereUniqueInput!
}

input LikedReviewWhereInput {
  AND: [LikedReviewWhereInput!]
  NOT: [LikedReviewWhereInput!]
  OR: [LikedReviewWhereInput!]
  id: IntFilter
  likedAt: DateTimeFilter
  review: ReviewRelationFilter
  reviewId: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input LikedReviewWhereUniqueInput {
  AND: [LikedReviewWhereInput!]
  NOT: [LikedReviewWhereInput!]
  OR: [LikedReviewWhereInput!]
  id: Int
  likedAt: DateTimeFilter
  review: ReviewRelationFilter
  reviewId: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input LogInInput {
  email: String!
  password: String!
}

type Mutation {
  createBook(data: BookCreateInput!): Book!
  createJournalEntry(book: BookWhereUniqueInput!, data: JournalEntryCreateInput!): JournalEntry!
  createReview(data: ReviewCreateInput!, where: BookWhereUniqueInput!): Review!
  createShelf(data: ShelfCreateInput!): Shelf!
  createUser(userCreateInput: UserCreateInput!): User!
  deleteShelf(where: ShelfWhereUniqueInput!): Shelf
  importUserBooks(content: String!): Boolean!
  logout(id: String!): Boolean!
  refreshAuth: RefreshResponse!
  removeJournalEntry(where: JournalEntryWhereUniqueInput!): JournalEntry!
  removeUserBook(where: BookWhereUniqueInput!): UserBook!
  signin(logInInput: LogInInput!): AuthResponse!
  signup(registerInput: RegisterInput!): User!
  updateJournalEntry(data: JournalEntryUpdateInput!, where: JournalEntryWhereUniqueInput!): JournalEntry!
  updateShelf(data: ShelfUpdateInput!, where: ShelfWhereUniqueInput!): Shelf
  updateUserBook(data: UserBookUpdateInput!, where: BookWhereUniqueInput!): UserBook!
}

enum NullsOrder {
  first
  last
}

type Query {
  bookReviews(limit: Int! = 20, offset: Int! = 0, where: BookWhereUniqueInput!): [Review!]!
  countJournalEntries(book: BookWhereUniqueInput): Int!
  countUserBooks(where: UserBookWhereInput): Int!
  getMostRecentJournalEntry(book: BookWhereUniqueInput): JournalEntry
  journalEntries(book: BookWhereUniqueInput, limit: Int! = 20, offset: Int! = 0): [JournalEntry!]!
  me: User!
  shelves: [Shelf!]
  userBook(where: BookWhereUniqueInput!): UserBook
  userBooks(limit: Int! = 20, offset: Int! = 0, orderBy: UserBookOrderByWithRelationInput, where: UserBookWhereInput): [UserBook!]
}

enum QueryMode {
  default
  insensitive
}

type RefreshResponse {
  accessToken: String!
  expiresIn: Float!
  refreshToken: String!
}

input RegisterInput {
  email: String!
  password: String!
  username: String!
}

type Review {
  _count: ReviewCount!
  book: Book
  bookId: String
  comments: [Comment!]
  content: String
  createdAt: Timestamp!
  id: ID!
  likes: [LikedReview!]
  spoilers: Boolean!
  user: User
  userId: String
}

type ReviewCount {
  comments: Int!
  likes: Int!
}

type ReviewCountAggregate {
  _all: Int!
  bookId: Int!
  content: Int!
  createdAt: Int!
  id: Int!
  spoilers: Int!
  userId: Int!
}

input ReviewCreateInput {
  book: BookCreateNestedOneWithoutReviewsInput
  comments: CommentCreateNestedManyWithoutReviewInput
  content: String
  createdAt: Timestamp
  id: String
  likes: LikedReviewCreateNestedManyWithoutReviewInput
  spoilers: Boolean
  user: UserCreateNestedOneWithoutReviewsInput
}

input ReviewCreateManyBookInput {
  content: String
  createdAt: Timestamp
  id: String
  spoilers: Boolean
  userId: String
}

input ReviewCreateManyBookInputEnvelope {
  data: [ReviewCreateManyBookInput!]!
  skipDuplicates: Boolean
}

input ReviewCreateManyUserInput {
  bookId: String
  content: String
  createdAt: Timestamp
  id: String
  spoilers: Boolean
}

input ReviewCreateManyUserInputEnvelope {
  data: [ReviewCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ReviewCreateNestedManyWithoutBookInput {
  connect: [ReviewWhereUniqueInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutBookInput!]
  create: [ReviewCreateWithoutBookInput!]
  createMany: ReviewCreateManyBookInputEnvelope
}

input ReviewCreateNestedManyWithoutUserInput {
  connect: [ReviewWhereUniqueInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutUserInput!]
  create: [ReviewCreateWithoutUserInput!]
  createMany: ReviewCreateManyUserInputEnvelope
}

input ReviewCreateNestedOneWithoutCommentsInput {
  connect: ReviewWhereUniqueInput
  connectOrCreate: ReviewCreateOrConnectWithoutCommentsInput
  create: ReviewCreateWithoutCommentsInput
}

input ReviewCreateNestedOneWithoutLikesInput {
  connect: ReviewWhereUniqueInput
  connectOrCreate: ReviewCreateOrConnectWithoutLikesInput
  create: ReviewCreateWithoutLikesInput
}

input ReviewCreateOrConnectWithoutBookInput {
  create: ReviewCreateWithoutBookInput!
  where: ReviewWhereUniqueInput!
}

input ReviewCreateOrConnectWithoutCommentsInput {
  create: ReviewCreateWithoutCommentsInput!
  where: ReviewWhereUniqueInput!
}

input ReviewCreateOrConnectWithoutLikesInput {
  create: ReviewCreateWithoutLikesInput!
  where: ReviewWhereUniqueInput!
}

input ReviewCreateOrConnectWithoutUserInput {
  create: ReviewCreateWithoutUserInput!
  where: ReviewWhereUniqueInput!
}

input ReviewCreateWithoutBookInput {
  comments: CommentCreateNestedManyWithoutReviewInput
  content: String
  createdAt: Timestamp
  id: String
  likes: LikedReviewCreateNestedManyWithoutReviewInput
  spoilers: Boolean
  user: UserCreateNestedOneWithoutReviewsInput
}

input ReviewCreateWithoutCommentsInput {
  book: BookCreateNestedOneWithoutReviewsInput
  content: String
  createdAt: Timestamp
  id: String
  likes: LikedReviewCreateNestedManyWithoutReviewInput
  spoilers: Boolean
  user: UserCreateNestedOneWithoutReviewsInput
}

input ReviewCreateWithoutLikesInput {
  book: BookCreateNestedOneWithoutReviewsInput
  comments: CommentCreateNestedManyWithoutReviewInput
  content: String
  createdAt: Timestamp
  id: String
  spoilers: Boolean
  user: UserCreateNestedOneWithoutReviewsInput
}

input ReviewCreateWithoutUserInput {
  book: BookCreateNestedOneWithoutReviewsInput
  comments: CommentCreateNestedManyWithoutReviewInput
  content: String
  createdAt: Timestamp
  id: String
  likes: LikedReviewCreateNestedManyWithoutReviewInput
  spoilers: Boolean
}

input ReviewListRelationFilter {
  every: ReviewWhereInput
  none: ReviewWhereInput
  some: ReviewWhereInput
}

type ReviewMaxAggregate {
  bookId: String
  content: String
  createdAt: Timestamp
  id: String
  spoilers: Boolean
  userId: String
}

type ReviewMinAggregate {
  bookId: String
  content: String
  createdAt: Timestamp
  id: String
  spoilers: Boolean
  userId: String
}

input ReviewOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReviewRelationFilter {
  is: ReviewWhereInput
  isNot: ReviewWhereInput
}

input ReviewScalarWhereInput {
  AND: [ReviewScalarWhereInput!]
  NOT: [ReviewScalarWhereInput!]
  OR: [ReviewScalarWhereInput!]
  bookId: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  spoilers: BoolFilter
  userId: StringFilter
}

input ReviewUpdateManyMutationInput {
  content: String
  createdAt: Timestamp
  id: String
  spoilers: Boolean
}

input ReviewUpdateManyWithWhereWithoutBookInput {
  data: ReviewUpdateManyMutationInput!
  where: ReviewScalarWhereInput!
}

input ReviewUpdateManyWithWhereWithoutUserInput {
  data: ReviewUpdateManyMutationInput!
  where: ReviewScalarWhereInput!
}

input ReviewUpdateManyWithoutBookNestedInput {
  connect: [ReviewWhereUniqueInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutBookInput!]
  create: [ReviewCreateWithoutBookInput!]
  createMany: ReviewCreateManyBookInputEnvelope
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [ReviewUpdateManyWithWhereWithoutBookInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutBookInput!]
}

input ReviewUpdateManyWithoutUserNestedInput {
  connect: [ReviewWhereUniqueInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutUserInput!]
  create: [ReviewCreateWithoutUserInput!]
  createMany: ReviewCreateManyUserInputEnvelope
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ReviewUpdateManyWithWhereWithoutUserInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutUserInput!]
}

input ReviewUpdateOneRequiredWithoutLikesNestedInput {
  connect: ReviewWhereUniqueInput
  connectOrCreate: ReviewCreateOrConnectWithoutLikesInput
  create: ReviewCreateWithoutLikesInput
  update: ReviewUpdateToOneWithWhereWithoutLikesInput
  upsert: ReviewUpsertWithoutLikesInput
}

input ReviewUpdateOneWithoutCommentsNestedInput {
  connect: ReviewWhereUniqueInput
  connectOrCreate: ReviewCreateOrConnectWithoutCommentsInput
  create: ReviewCreateWithoutCommentsInput
  delete: ReviewWhereInput
  disconnect: ReviewWhereInput
  update: ReviewUpdateToOneWithWhereWithoutCommentsInput
  upsert: ReviewUpsertWithoutCommentsInput
}

input ReviewUpdateToOneWithWhereWithoutCommentsInput {
  data: ReviewUpdateWithoutCommentsInput!
  where: ReviewWhereInput
}

input ReviewUpdateToOneWithWhereWithoutLikesInput {
  data: ReviewUpdateWithoutLikesInput!
  where: ReviewWhereInput
}

input ReviewUpdateWithWhereUniqueWithoutBookInput {
  data: ReviewUpdateWithoutBookInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpdateWithWhereUniqueWithoutUserInput {
  data: ReviewUpdateWithoutUserInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpdateWithoutBookInput {
  comments: CommentUpdateManyWithoutReviewNestedInput
  content: String
  createdAt: Timestamp
  id: String
  likes: LikedReviewUpdateManyWithoutReviewNestedInput
  spoilers: Boolean
  user: UserUpdateOneWithoutReviewsNestedInput
}

input ReviewUpdateWithoutCommentsInput {
  book: BookUpdateOneWithoutReviewsNestedInput
  content: String
  createdAt: Timestamp
  id: String
  likes: LikedReviewUpdateManyWithoutReviewNestedInput
  spoilers: Boolean
  user: UserUpdateOneWithoutReviewsNestedInput
}

input ReviewUpdateWithoutLikesInput {
  book: BookUpdateOneWithoutReviewsNestedInput
  comments: CommentUpdateManyWithoutReviewNestedInput
  content: String
  createdAt: Timestamp
  id: String
  spoilers: Boolean
  user: UserUpdateOneWithoutReviewsNestedInput
}

input ReviewUpdateWithoutUserInput {
  book: BookUpdateOneWithoutReviewsNestedInput
  comments: CommentUpdateManyWithoutReviewNestedInput
  content: String
  createdAt: Timestamp
  id: String
  likes: LikedReviewUpdateManyWithoutReviewNestedInput
  spoilers: Boolean
}

input ReviewUpsertWithWhereUniqueWithoutBookInput {
  create: ReviewCreateWithoutBookInput!
  update: ReviewUpdateWithoutBookInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithWhereUniqueWithoutUserInput {
  create: ReviewCreateWithoutUserInput!
  update: ReviewUpdateWithoutUserInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithoutCommentsInput {
  create: ReviewCreateWithoutCommentsInput!
  update: ReviewUpdateWithoutCommentsInput!
  where: ReviewWhereInput
}

input ReviewUpsertWithoutLikesInput {
  create: ReviewCreateWithoutLikesInput!
  update: ReviewUpdateWithoutLikesInput!
  where: ReviewWhereInput
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  book: BookRelationFilter
  bookId: StringFilter
  comments: CommentListRelationFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  likes: LikedReviewListRelationFilter
  spoilers: BoolFilter
  user: UserRelationFilter
  userId: StringFilter
}

input ReviewWhereUniqueInput {
  AND: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  book: BookRelationFilter
  bookId: StringFilter
  comments: CommentListRelationFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: String
  likes: LikedReviewListRelationFilter
  spoilers: BoolFilter
  user: UserRelationFilter
  userId: StringFilter
}

type Shelf {
  _count: ShelfCount!
  dateTime: String
  id: ID!
  name: String!
  user: User
  userBooks: [UserBookShelves!]
  userId: String
}

type ShelfCount {
  userBooks: Int!
}

type ShelfCountAggregate {
  _all: Int!
  dateTime: Int!
  id: Int!
  name: Int!
  userId: Int!
}

input ShelfCreateInput {
  dateTime: String
  id: String
  name: String!
  user: UserCreateNestedOneWithoutShelvesInput
  userBooks: UserBookShelvesCreateNestedManyWithoutShelfInput
}

input ShelfCreateManyUserInput {
  dateTime: String
  id: String
  name: String!
}

input ShelfCreateManyUserInputEnvelope {
  data: [ShelfCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ShelfCreateNestedManyWithoutUserInput {
  connect: [ShelfWhereUniqueInput!]
  connectOrCreate: [ShelfCreateOrConnectWithoutUserInput!]
  create: [ShelfCreateWithoutUserInput!]
  createMany: ShelfCreateManyUserInputEnvelope
}

input ShelfCreateNestedOneWithoutUserBooksInput {
  connect: ShelfWhereUniqueInput
  connectOrCreate: ShelfCreateOrConnectWithoutUserBooksInput
  create: ShelfCreateWithoutUserBooksInput
}

input ShelfCreateOrConnectWithoutUserBooksInput {
  create: ShelfCreateWithoutUserBooksInput!
  where: ShelfWhereUniqueInput!
}

input ShelfCreateOrConnectWithoutUserInput {
  create: ShelfCreateWithoutUserInput!
  where: ShelfWhereUniqueInput!
}

input ShelfCreateWithoutUserBooksInput {
  dateTime: String
  id: String
  name: String!
  user: UserCreateNestedOneWithoutShelvesInput
}

input ShelfCreateWithoutUserInput {
  dateTime: String
  id: String
  name: String!
  userBooks: UserBookShelvesCreateNestedManyWithoutShelfInput
}

input ShelfIdentifierCompoundUniqueInput {
  name: String!
  userId: String!
}

input ShelfListRelationFilter {
  every: ShelfWhereInput
  none: ShelfWhereInput
  some: ShelfWhereInput
}

type ShelfMaxAggregate {
  dateTime: String
  id: String
  name: String
  userId: String
}

type ShelfMinAggregate {
  dateTime: String
  id: String
  name: String
  userId: String
}

input ShelfOrderByRelationAggregateInput {
  _count: SortOrder
}

input ShelfRelationFilter {
  is: ShelfWhereInput
  isNot: ShelfWhereInput
}

input ShelfScalarWhereInput {
  AND: [ShelfScalarWhereInput!]
  NOT: [ShelfScalarWhereInput!]
  OR: [ShelfScalarWhereInput!]
  dateTime: StringFilter
  id: StringFilter
  name: StringFilter
  userId: StringFilter
}

input ShelfUpdateInput {
  dateTime: String
  id: String
  name: String
  user: UserUpdateOneWithoutShelvesNestedInput
  userBooks: UserBookShelvesUpdateManyWithoutShelfNestedInput
}

input ShelfUpdateManyMutationInput {
  dateTime: String
  id: String
  name: String
}

input ShelfUpdateManyWithWhereWithoutUserInput {
  data: ShelfUpdateManyMutationInput!
  where: ShelfScalarWhereInput!
}

input ShelfUpdateManyWithoutUserNestedInput {
  connect: [ShelfWhereUniqueInput!]
  connectOrCreate: [ShelfCreateOrConnectWithoutUserInput!]
  create: [ShelfCreateWithoutUserInput!]
  createMany: ShelfCreateManyUserInputEnvelope
  delete: [ShelfWhereUniqueInput!]
  deleteMany: [ShelfScalarWhereInput!]
  disconnect: [ShelfWhereUniqueInput!]
  set: [ShelfWhereUniqueInput!]
  update: [ShelfUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ShelfUpdateManyWithWhereWithoutUserInput!]
  upsert: [ShelfUpsertWithWhereUniqueWithoutUserInput!]
}

input ShelfUpdateOneRequiredWithoutUserBooksNestedInput {
  connect: ShelfWhereUniqueInput
  connectOrCreate: ShelfCreateOrConnectWithoutUserBooksInput
  create: ShelfCreateWithoutUserBooksInput
  update: ShelfUpdateToOneWithWhereWithoutUserBooksInput
  upsert: ShelfUpsertWithoutUserBooksInput
}

input ShelfUpdateToOneWithWhereWithoutUserBooksInput {
  data: ShelfUpdateWithoutUserBooksInput!
  where: ShelfWhereInput
}

input ShelfUpdateWithWhereUniqueWithoutUserInput {
  data: ShelfUpdateWithoutUserInput!
  where: ShelfWhereUniqueInput!
}

input ShelfUpdateWithoutUserBooksInput {
  dateTime: String
  id: String
  name: String
  user: UserUpdateOneWithoutShelvesNestedInput
}

input ShelfUpdateWithoutUserInput {
  dateTime: String
  id: String
  name: String
  userBooks: UserBookShelvesUpdateManyWithoutShelfNestedInput
}

input ShelfUpsertWithWhereUniqueWithoutUserInput {
  create: ShelfCreateWithoutUserInput!
  update: ShelfUpdateWithoutUserInput!
  where: ShelfWhereUniqueInput!
}

input ShelfUpsertWithoutUserBooksInput {
  create: ShelfCreateWithoutUserBooksInput!
  update: ShelfUpdateWithoutUserBooksInput!
  where: ShelfWhereInput
}

input ShelfWhereInput {
  AND: [ShelfWhereInput!]
  NOT: [ShelfWhereInput!]
  OR: [ShelfWhereInput!]
  dateTime: StringFilter
  id: StringFilter
  name: StringFilter
  user: UserRelationFilter
  userBooks: UserBookShelvesListRelationFilter
  userId: StringFilter
}

input ShelfWhereUniqueInput {
  AND: [ShelfWhereInput!]
  NOT: [ShelfWhereInput!]
  OR: [ShelfWhereInput!]
  dateTime: StringFilter
  id: String
  identifier: ShelfIdentifierCompoundUniqueInput
  name: StringFilter
  user: UserRelationFilter
  userBooks: UserBookShelvesListRelationFilter
  userId: StringFilter
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: StringFilter
  notIn: [String!]
  startsWith: String
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type User {
  _count: UserCount!
  comments: [Comment!]
  createdAt: Timestamp!
  email: String!
  id: ID!
  journalEntries: [JournalEntry!]
  likedReviews: [LikedReview!]
  reviews: [Review!]
  shelves: [Shelf!]
  updatedAt: Timestamp!
  userBooks: [UserBook!]
  username: String
}

type UserBook {
  _count: UserBookCount!
  book: Book
  bookId: String!
  createdAt: Timestamp!
  id: ID!
  journalEntry: [JournalEntry!]
  rating: Int
  shelves: [UserBookShelves!]
  status: String!
  updatedAt: Timestamp!
  user: User
  userId: String!
}

type UserBookAvgAggregate {
  rating: Float
}

type UserBookCount {
  journalEntry: Int!
  shelves: Int!
}

type UserBookCountAggregate {
  _all: Int!
  bookId: Int!
  createdAt: Int!
  id: Int!
  rating: Int!
  status: Int!
  updatedAt: Int!
  userId: Int!
}

input UserBookCreateManyBookInput {
  createdAt: Timestamp
  id: String
  rating: Int
  status: String!
  updatedAt: Timestamp
  userId: String!
}

input UserBookCreateManyBookInputEnvelope {
  data: [UserBookCreateManyBookInput!]!
  skipDuplicates: Boolean
}

input UserBookCreateManyUserInput {
  bookId: String!
  createdAt: Timestamp
  id: String
  rating: Int
  status: String!
  updatedAt: Timestamp
}

input UserBookCreateManyUserInputEnvelope {
  data: [UserBookCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserBookCreateNestedManyWithoutBookInput {
  connect: [UserBookWhereUniqueInput!]
  connectOrCreate: [UserBookCreateOrConnectWithoutBookInput!]
  create: [UserBookCreateWithoutBookInput!]
  createMany: UserBookCreateManyBookInputEnvelope
}

input UserBookCreateNestedManyWithoutUserInput {
  connect: [UserBookWhereUniqueInput!]
  connectOrCreate: [UserBookCreateOrConnectWithoutUserInput!]
  create: [UserBookCreateWithoutUserInput!]
  createMany: UserBookCreateManyUserInputEnvelope
}

input UserBookCreateNestedOneWithoutJournalEntryInput {
  connect: UserBookWhereUniqueInput
  connectOrCreate: UserBookCreateOrConnectWithoutJournalEntryInput
  create: UserBookCreateWithoutJournalEntryInput
}

input UserBookCreateNestedOneWithoutShelvesInput {
  connect: UserBookWhereUniqueInput
  connectOrCreate: UserBookCreateOrConnectWithoutShelvesInput
  create: UserBookCreateWithoutShelvesInput
}

input UserBookCreateOrConnectWithoutBookInput {
  create: UserBookCreateWithoutBookInput!
  where: UserBookWhereUniqueInput!
}

input UserBookCreateOrConnectWithoutJournalEntryInput {
  create: UserBookCreateWithoutJournalEntryInput!
  where: UserBookWhereUniqueInput!
}

input UserBookCreateOrConnectWithoutShelvesInput {
  create: UserBookCreateWithoutShelvesInput!
  where: UserBookWhereUniqueInput!
}

input UserBookCreateOrConnectWithoutUserInput {
  create: UserBookCreateWithoutUserInput!
  where: UserBookWhereUniqueInput!
}

input UserBookCreateWithoutBookInput {
  createdAt: Timestamp
  id: String
  journalEntry: JournalEntryCreateNestedManyWithoutUserBookInput
  rating: Int
  shelves: UserBookShelvesCreateNestedManyWithoutUserBookInput
  status: String!
  updatedAt: Timestamp
  user: UserCreateNestedOneWithoutUserBooksInput
}

input UserBookCreateWithoutJournalEntryInput {
  book: BookCreateNestedOneWithoutUserBookInput
  createdAt: Timestamp
  id: String
  rating: Int
  shelves: UserBookShelvesCreateNestedManyWithoutUserBookInput
  status: String!
  updatedAt: Timestamp
  user: UserCreateNestedOneWithoutUserBooksInput
}

input UserBookCreateWithoutShelvesInput {
  book: BookCreateNestedOneWithoutUserBookInput
  createdAt: Timestamp
  id: String
  journalEntry: JournalEntryCreateNestedManyWithoutUserBookInput
  rating: Int
  status: String!
  updatedAt: Timestamp
  user: UserCreateNestedOneWithoutUserBooksInput
}

input UserBookCreateWithoutUserInput {
  book: BookCreateNestedOneWithoutUserBookInput
  createdAt: Timestamp
  id: String
  journalEntry: JournalEntryCreateNestedManyWithoutUserBookInput
  rating: Int
  shelves: UserBookShelvesCreateNestedManyWithoutUserBookInput
  status: String!
  updatedAt: Timestamp
}

input UserBookIdentifierCompoundUniqueInput {
  bookId: String!
  userId: String!
}

input UserBookListRelationFilter {
  every: UserBookWhereInput
  none: UserBookWhereInput
  some: UserBookWhereInput
}

type UserBookMaxAggregate {
  bookId: String
  createdAt: Timestamp
  id: String
  rating: Int
  status: String
  updatedAt: Timestamp
  userId: String
}

type UserBookMinAggregate {
  bookId: String
  createdAt: Timestamp
  id: String
  rating: Int
  status: String
  updatedAt: Timestamp
  userId: String
}

input UserBookOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserBookOrderByWithRelationInput {
  book: BookOrderByWithRelationInput
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  journalEntry: JournalEntryOrderByRelationAggregateInput
  rating: SortOrderInput
  shelves: UserBookShelvesOrderByRelationAggregateInput
  status: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input UserBookRelationFilter {
  is: UserBookWhereInput
  isNot: UserBookWhereInput
}

input UserBookScalarWhereInput {
  AND: [UserBookScalarWhereInput!]
  NOT: [UserBookScalarWhereInput!]
  OR: [UserBookScalarWhereInput!]
  bookId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  rating: IntFilter
  status: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

type UserBookShelves {
  shelf: Shelf!
  shelfId: String!
  userBook: UserBook!
  userBookId: String!
}

type UserBookShelvesCountAggregate {
  _all: Int!
  shelfId: Int!
  userBookId: Int!
}

input UserBookShelvesCreateManyShelfInput {
  userBookId: String!
}

input UserBookShelvesCreateManyShelfInputEnvelope {
  data: [UserBookShelvesCreateManyShelfInput!]!
  skipDuplicates: Boolean
}

input UserBookShelvesCreateManyUserBookInput {
  shelfId: String!
}

input UserBookShelvesCreateManyUserBookInputEnvelope {
  data: [UserBookShelvesCreateManyUserBookInput!]!
  skipDuplicates: Boolean
}

input UserBookShelvesCreateNestedManyWithoutShelfInput {
  connect: [UserBookShelvesWhereUniqueInput!]
  connectOrCreate: [UserBookShelvesCreateOrConnectWithoutShelfInput!]
  create: [UserBookShelvesCreateWithoutShelfInput!]
  createMany: UserBookShelvesCreateManyShelfInputEnvelope
}

input UserBookShelvesCreateNestedManyWithoutUserBookInput {
  connect: [UserBookShelvesWhereUniqueInput!]
  connectOrCreate: [UserBookShelvesCreateOrConnectWithoutUserBookInput!]
  create: [UserBookShelvesCreateWithoutUserBookInput!]
  createMany: UserBookShelvesCreateManyUserBookInputEnvelope
}

input UserBookShelvesCreateOrConnectWithoutShelfInput {
  create: UserBookShelvesCreateWithoutShelfInput!
  where: UserBookShelvesWhereUniqueInput!
}

input UserBookShelvesCreateOrConnectWithoutUserBookInput {
  create: UserBookShelvesCreateWithoutUserBookInput!
  where: UserBookShelvesWhereUniqueInput!
}

input UserBookShelvesCreateWithoutShelfInput {
  userBook: UserBookCreateNestedOneWithoutShelvesInput!
}

input UserBookShelvesCreateWithoutUserBookInput {
  shelf: ShelfCreateNestedOneWithoutUserBooksInput!
}

input UserBookShelvesListRelationFilter {
  every: UserBookShelvesWhereInput
  none: UserBookShelvesWhereInput
  some: UserBookShelvesWhereInput
}

type UserBookShelvesMaxAggregate {
  shelfId: String
  userBookId: String
}

type UserBookShelvesMinAggregate {
  shelfId: String
  userBookId: String
}

input UserBookShelvesOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserBookShelvesScalarWhereInput {
  AND: [UserBookShelvesScalarWhereInput!]
  NOT: [UserBookShelvesScalarWhereInput!]
  OR: [UserBookShelvesScalarWhereInput!]
  shelfId: StringFilter
  userBookId: StringFilter
}

input UserBookShelvesUncheckedUpdateManyWithoutShelfInput {
  userBookId: String
}

input UserBookShelvesUncheckedUpdateManyWithoutUserBookInput {
  shelfId: String
}

input UserBookShelvesUpdateManyWithWhereWithoutShelfInput {
  data: UserBookShelvesUncheckedUpdateManyWithoutShelfInput!
  where: UserBookShelvesScalarWhereInput!
}

input UserBookShelvesUpdateManyWithWhereWithoutUserBookInput {
  data: UserBookShelvesUncheckedUpdateManyWithoutUserBookInput!
  where: UserBookShelvesScalarWhereInput!
}

input UserBookShelvesUpdateManyWithoutShelfNestedInput {
  connect: [UserBookShelvesWhereUniqueInput!]
  connectOrCreate: [UserBookShelvesCreateOrConnectWithoutShelfInput!]
  create: [UserBookShelvesCreateWithoutShelfInput!]
  createMany: UserBookShelvesCreateManyShelfInputEnvelope
  delete: [UserBookShelvesWhereUniqueInput!]
  deleteMany: [UserBookShelvesScalarWhereInput!]
  disconnect: [UserBookShelvesWhereUniqueInput!]
  set: [UserBookShelvesWhereUniqueInput!]
  update: [UserBookShelvesUpdateWithWhereUniqueWithoutShelfInput!]
  updateMany: [UserBookShelvesUpdateManyWithWhereWithoutShelfInput!]
  upsert: [UserBookShelvesUpsertWithWhereUniqueWithoutShelfInput!]
}

input UserBookShelvesUpdateManyWithoutUserBookNestedInput {
  connect: [UserBookShelvesWhereUniqueInput!]
  connectOrCreate: [UserBookShelvesCreateOrConnectWithoutUserBookInput!]
  create: [UserBookShelvesCreateWithoutUserBookInput!]
  createMany: UserBookShelvesCreateManyUserBookInputEnvelope
  delete: [UserBookShelvesWhereUniqueInput!]
  deleteMany: [UserBookShelvesScalarWhereInput!]
  disconnect: [UserBookShelvesWhereUniqueInput!]
  set: [UserBookShelvesWhereUniqueInput!]
  update: [UserBookShelvesUpdateWithWhereUniqueWithoutUserBookInput!]
  updateMany: [UserBookShelvesUpdateManyWithWhereWithoutUserBookInput!]
  upsert: [UserBookShelvesUpsertWithWhereUniqueWithoutUserBookInput!]
}

input UserBookShelvesUpdateWithWhereUniqueWithoutShelfInput {
  data: UserBookShelvesUpdateWithoutShelfInput!
  where: UserBookShelvesWhereUniqueInput!
}

input UserBookShelvesUpdateWithWhereUniqueWithoutUserBookInput {
  data: UserBookShelvesUpdateWithoutUserBookInput!
  where: UserBookShelvesWhereUniqueInput!
}

input UserBookShelvesUpdateWithoutShelfInput {
  userBook: UserBookUpdateOneRequiredWithoutShelvesNestedInput
}

input UserBookShelvesUpdateWithoutUserBookInput {
  shelf: ShelfUpdateOneRequiredWithoutUserBooksNestedInput
}

input UserBookShelvesUpsertWithWhereUniqueWithoutShelfInput {
  create: UserBookShelvesCreateWithoutShelfInput!
  update: UserBookShelvesUpdateWithoutShelfInput!
  where: UserBookShelvesWhereUniqueInput!
}

input UserBookShelvesUpsertWithWhereUniqueWithoutUserBookInput {
  create: UserBookShelvesCreateWithoutUserBookInput!
  update: UserBookShelvesUpdateWithoutUserBookInput!
  where: UserBookShelvesWhereUniqueInput!
}

input UserBookShelvesUserBookIdShelfIdCompoundUniqueInput {
  shelfId: String!
  userBookId: String!
}

input UserBookShelvesWhereInput {
  AND: [UserBookShelvesWhereInput!]
  NOT: [UserBookShelvesWhereInput!]
  OR: [UserBookShelvesWhereInput!]
  shelf: ShelfRelationFilter
  shelfId: StringFilter
  userBook: UserBookRelationFilter
  userBookId: StringFilter
}

input UserBookShelvesWhereUniqueInput {
  AND: [UserBookShelvesWhereInput!]
  NOT: [UserBookShelvesWhereInput!]
  OR: [UserBookShelvesWhereInput!]
  shelf: ShelfRelationFilter
  shelfId: StringFilter
  userBook: UserBookRelationFilter
  userBookId: StringFilter
  userBookId_shelfId: UserBookShelvesUserBookIdShelfIdCompoundUniqueInput
}

type UserBookSumAggregate {
  rating: Int
}

input UserBookUpdateInput {
  rating: Float
  shelves: [String!]
  status: String
}

input UserBookUpdateManyMutationInput {
  createdAt: Timestamp
  id: String
  rating: Int
  status: String
  updatedAt: Timestamp
}

input UserBookUpdateManyWithWhereWithoutBookInput {
  data: UserBookUpdateManyMutationInput!
  where: UserBookScalarWhereInput!
}

input UserBookUpdateManyWithWhereWithoutUserInput {
  data: UserBookUpdateManyMutationInput!
  where: UserBookScalarWhereInput!
}

input UserBookUpdateManyWithoutBookNestedInput {
  connect: [UserBookWhereUniqueInput!]
  connectOrCreate: [UserBookCreateOrConnectWithoutBookInput!]
  create: [UserBookCreateWithoutBookInput!]
  createMany: UserBookCreateManyBookInputEnvelope
  delete: [UserBookWhereUniqueInput!]
  deleteMany: [UserBookScalarWhereInput!]
  disconnect: [UserBookWhereUniqueInput!]
  set: [UserBookWhereUniqueInput!]
  update: [UserBookUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [UserBookUpdateManyWithWhereWithoutBookInput!]
  upsert: [UserBookUpsertWithWhereUniqueWithoutBookInput!]
}

input UserBookUpdateManyWithoutUserNestedInput {
  connect: [UserBookWhereUniqueInput!]
  connectOrCreate: [UserBookCreateOrConnectWithoutUserInput!]
  create: [UserBookCreateWithoutUserInput!]
  createMany: UserBookCreateManyUserInputEnvelope
  delete: [UserBookWhereUniqueInput!]
  deleteMany: [UserBookScalarWhereInput!]
  disconnect: [UserBookWhereUniqueInput!]
  set: [UserBookWhereUniqueInput!]
  update: [UserBookUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserBookUpdateManyWithWhereWithoutUserInput!]
  upsert: [UserBookUpsertWithWhereUniqueWithoutUserInput!]
}

input UserBookUpdateOneRequiredWithoutShelvesNestedInput {
  connect: UserBookWhereUniqueInput
  connectOrCreate: UserBookCreateOrConnectWithoutShelvesInput
  create: UserBookCreateWithoutShelvesInput
  update: UserBookUpdateToOneWithWhereWithoutShelvesInput
  upsert: UserBookUpsertWithoutShelvesInput
}

input UserBookUpdateOneWithoutJournalEntryNestedInput {
  connect: UserBookWhereUniqueInput
  connectOrCreate: UserBookCreateOrConnectWithoutJournalEntryInput
  create: UserBookCreateWithoutJournalEntryInput
  delete: UserBookWhereInput
  disconnect: UserBookWhereInput
  update: UserBookUpdateToOneWithWhereWithoutJournalEntryInput
  upsert: UserBookUpsertWithoutJournalEntryInput
}

input UserBookUpdateToOneWithWhereWithoutJournalEntryInput {
  data: UserBookUpdateWithoutJournalEntryInput!
  where: UserBookWhereInput
}

input UserBookUpdateToOneWithWhereWithoutShelvesInput {
  data: UserBookUpdateWithoutShelvesInput!
  where: UserBookWhereInput
}

input UserBookUpdateWithWhereUniqueWithoutBookInput {
  data: UserBookUpdateWithoutBookInput!
  where: UserBookWhereUniqueInput!
}

input UserBookUpdateWithWhereUniqueWithoutUserInput {
  data: UserBookUpdateWithoutUserInput!
  where: UserBookWhereUniqueInput!
}

input UserBookUpdateWithoutBookInput {
  createdAt: Timestamp
  id: String
  journalEntry: JournalEntryUpdateManyWithoutUserBookNestedInput
  rating: Int
  shelves: UserBookShelvesUpdateManyWithoutUserBookNestedInput
  status: String
  updatedAt: Timestamp
  user: UserUpdateOneWithoutUserBooksNestedInput
}

input UserBookUpdateWithoutJournalEntryInput {
  book: BookUpdateOneWithoutUserBookNestedInput
  createdAt: Timestamp
  id: String
  rating: Int
  shelves: UserBookShelvesUpdateManyWithoutUserBookNestedInput
  status: String
  updatedAt: Timestamp
  user: UserUpdateOneWithoutUserBooksNestedInput
}

input UserBookUpdateWithoutShelvesInput {
  book: BookUpdateOneWithoutUserBookNestedInput
  createdAt: Timestamp
  id: String
  journalEntry: JournalEntryUpdateManyWithoutUserBookNestedInput
  rating: Int
  status: String
  updatedAt: Timestamp
  user: UserUpdateOneWithoutUserBooksNestedInput
}

input UserBookUpdateWithoutUserInput {
  book: BookUpdateOneWithoutUserBookNestedInput
  createdAt: Timestamp
  id: String
  journalEntry: JournalEntryUpdateManyWithoutUserBookNestedInput
  rating: Int
  shelves: UserBookShelvesUpdateManyWithoutUserBookNestedInput
  status: String
  updatedAt: Timestamp
}

input UserBookUpsertWithWhereUniqueWithoutBookInput {
  create: UserBookCreateWithoutBookInput!
  update: UserBookUpdateWithoutBookInput!
  where: UserBookWhereUniqueInput!
}

input UserBookUpsertWithWhereUniqueWithoutUserInput {
  create: UserBookCreateWithoutUserInput!
  update: UserBookUpdateWithoutUserInput!
  where: UserBookWhereUniqueInput!
}

input UserBookUpsertWithoutJournalEntryInput {
  create: UserBookCreateWithoutJournalEntryInput!
  update: UserBookUpdateWithoutJournalEntryInput!
  where: UserBookWhereInput
}

input UserBookUpsertWithoutShelvesInput {
  create: UserBookCreateWithoutShelvesInput!
  update: UserBookUpdateWithoutShelvesInput!
  where: UserBookWhereInput
}

input UserBookWhereInput {
  AND: [UserBookWhereInput!]
  NOT: [UserBookWhereInput!]
  OR: [UserBookWhereInput!]
  book: BookRelationFilter
  bookId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  journalEntry: JournalEntryListRelationFilter
  rating: IntFilter
  shelves: UserBookShelvesListRelationFilter
  status: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input UserBookWhereUniqueInput {
  AND: [UserBookWhereInput!]
  NOT: [UserBookWhereInput!]
  OR: [UserBookWhereInput!]
  book: BookRelationFilter
  bookId: StringFilter
  createdAt: DateTimeFilter
  id: String
  identifier: UserBookIdentifierCompoundUniqueInput
  journalEntry: JournalEntryListRelationFilter
  rating: IntFilter
  shelves: UserBookShelvesListRelationFilter
  status: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

type UserCount {
  comments: Int!
  journalEntries: Int!
  likedReviews: Int!
  reviews: Int!
  shelves: Int!
  userBooks: Int!
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  email: Int!
  id: Int!
  updatedAt: Int!
  username: Int!
}

input UserCreateInput {
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: Timestamp
  email: String!
  hashedPassword: String
  hashedRefreshToken: String
  id: String
  journalEntries: JournalEntryCreateNestedManyWithoutUserInput
  likedReviews: LikedReviewCreateNestedManyWithoutUserInput
  reviews: ReviewCreateNestedManyWithoutUserInput
  shelves: ShelfCreateNestedManyWithoutUserInput
  updatedAt: Timestamp
  userBooks: UserBookCreateNestedManyWithoutUserInput
  username: String
}

input UserCreateNestedOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateNestedOneWithoutJournalEntriesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutJournalEntriesInput
  create: UserCreateWithoutJournalEntriesInput
}

input UserCreateNestedOneWithoutLikedReviewsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutLikedReviewsInput
  create: UserCreateWithoutLikedReviewsInput
}

input UserCreateNestedOneWithoutReviewsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReviewsInput
  create: UserCreateWithoutReviewsInput
}

input UserCreateNestedOneWithoutShelvesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutShelvesInput
  create: UserCreateWithoutShelvesInput
}

input UserCreateNestedOneWithoutUserBooksInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUserBooksInput
  create: UserCreateWithoutUserBooksInput
}

input UserCreateOrConnectWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutJournalEntriesInput {
  create: UserCreateWithoutJournalEntriesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutLikedReviewsInput {
  create: UserCreateWithoutLikedReviewsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutShelvesInput {
  create: UserCreateWithoutShelvesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutUserBooksInput {
  create: UserCreateWithoutUserBooksInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutCommentsInput {
  createdAt: Timestamp
  email: String!
  hashedPassword: String
  hashedRefreshToken: String
  id: String
  journalEntries: JournalEntryCreateNestedManyWithoutUserInput
  likedReviews: LikedReviewCreateNestedManyWithoutUserInput
  reviews: ReviewCreateNestedManyWithoutUserInput
  shelves: ShelfCreateNestedManyWithoutUserInput
  updatedAt: Timestamp
  userBooks: UserBookCreateNestedManyWithoutUserInput
  username: String
}

input UserCreateWithoutJournalEntriesInput {
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: Timestamp
  email: String!
  hashedPassword: String
  hashedRefreshToken: String
  id: String
  likedReviews: LikedReviewCreateNestedManyWithoutUserInput
  reviews: ReviewCreateNestedManyWithoutUserInput
  shelves: ShelfCreateNestedManyWithoutUserInput
  updatedAt: Timestamp
  userBooks: UserBookCreateNestedManyWithoutUserInput
  username: String
}

input UserCreateWithoutLikedReviewsInput {
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: Timestamp
  email: String!
  hashedPassword: String
  hashedRefreshToken: String
  id: String
  journalEntries: JournalEntryCreateNestedManyWithoutUserInput
  reviews: ReviewCreateNestedManyWithoutUserInput
  shelves: ShelfCreateNestedManyWithoutUserInput
  updatedAt: Timestamp
  userBooks: UserBookCreateNestedManyWithoutUserInput
  username: String
}

input UserCreateWithoutReviewsInput {
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: Timestamp
  email: String!
  hashedPassword: String
  hashedRefreshToken: String
  id: String
  journalEntries: JournalEntryCreateNestedManyWithoutUserInput
  likedReviews: LikedReviewCreateNestedManyWithoutUserInput
  shelves: ShelfCreateNestedManyWithoutUserInput
  updatedAt: Timestamp
  userBooks: UserBookCreateNestedManyWithoutUserInput
  username: String
}

input UserCreateWithoutShelvesInput {
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: Timestamp
  email: String!
  hashedPassword: String
  hashedRefreshToken: String
  id: String
  journalEntries: JournalEntryCreateNestedManyWithoutUserInput
  likedReviews: LikedReviewCreateNestedManyWithoutUserInput
  reviews: ReviewCreateNestedManyWithoutUserInput
  updatedAt: Timestamp
  userBooks: UserBookCreateNestedManyWithoutUserInput
  username: String
}

input UserCreateWithoutUserBooksInput {
  comments: CommentCreateNestedManyWithoutUserInput
  createdAt: Timestamp
  email: String!
  hashedPassword: String
  hashedRefreshToken: String
  id: String
  journalEntries: JournalEntryCreateNestedManyWithoutUserInput
  likedReviews: LikedReviewCreateNestedManyWithoutUserInput
  reviews: ReviewCreateNestedManyWithoutUserInput
  shelves: ShelfCreateNestedManyWithoutUserInput
  updatedAt: Timestamp
  username: String
}

type UserMaxAggregate {
  createdAt: Timestamp
  email: String
  id: String
  updatedAt: Timestamp
  username: String
}

type UserMinAggregate {
  createdAt: Timestamp
  email: String
  id: String
  updatedAt: Timestamp
  username: String
}

input UserOrderByWithRelationInput {
  comments: CommentOrderByRelationAggregateInput
  createdAt: SortOrder
  email: SortOrder
  hashedPassword: SortOrderInput
  hashedRefreshToken: SortOrderInput
  id: SortOrder
  journalEntries: JournalEntryOrderByRelationAggregateInput
  likedReviews: LikedReviewOrderByRelationAggregateInput
  reviews: ReviewOrderByRelationAggregateInput
  shelves: ShelfOrderByRelationAggregateInput
  updatedAt: SortOrder
  userBooks: UserBookOrderByRelationAggregateInput
  username: SortOrderInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserUpdateOneWithoutCommentsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
  delete: UserWhereInput
  disconnect: UserWhereInput
  update: UserUpdateToOneWithWhereWithoutCommentsInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneWithoutJournalEntriesNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutJournalEntriesInput
  create: UserCreateWithoutJournalEntriesInput
  delete: UserWhereInput
  disconnect: UserWhereInput
  update: UserUpdateToOneWithWhereWithoutJournalEntriesInput
  upsert: UserUpsertWithoutJournalEntriesInput
}

input UserUpdateOneWithoutLikedReviewsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutLikedReviewsInput
  create: UserCreateWithoutLikedReviewsInput
  delete: UserWhereInput
  disconnect: UserWhereInput
  update: UserUpdateToOneWithWhereWithoutLikedReviewsInput
  upsert: UserUpsertWithoutLikedReviewsInput
}

input UserUpdateOneWithoutReviewsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReviewsInput
  create: UserCreateWithoutReviewsInput
  delete: UserWhereInput
  disconnect: UserWhereInput
  update: UserUpdateToOneWithWhereWithoutReviewsInput
  upsert: UserUpsertWithoutReviewsInput
}

input UserUpdateOneWithoutShelvesNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutShelvesInput
  create: UserCreateWithoutShelvesInput
  delete: UserWhereInput
  disconnect: UserWhereInput
  update: UserUpdateToOneWithWhereWithoutShelvesInput
  upsert: UserUpsertWithoutShelvesInput
}

input UserUpdateOneWithoutUserBooksNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUserBooksInput
  create: UserCreateWithoutUserBooksInput
  delete: UserWhereInput
  disconnect: UserWhereInput
  update: UserUpdateToOneWithWhereWithoutUserBooksInput
  upsert: UserUpsertWithoutUserBooksInput
}

input UserUpdateToOneWithWhereWithoutCommentsInput {
  data: UserUpdateWithoutCommentsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutJournalEntriesInput {
  data: UserUpdateWithoutJournalEntriesInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutLikedReviewsInput {
  data: UserUpdateWithoutLikedReviewsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutReviewsInput {
  data: UserUpdateWithoutReviewsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutShelvesInput {
  data: UserUpdateWithoutShelvesInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutUserBooksInput {
  data: UserUpdateWithoutUserBooksInput!
  where: UserWhereInput
}

input UserUpdateWithoutCommentsInput {
  createdAt: Timestamp
  email: String
  hashedPassword: String
  hashedRefreshToken: String
  id: String
  journalEntries: JournalEntryUpdateManyWithoutUserNestedInput
  likedReviews: LikedReviewUpdateManyWithoutUserNestedInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  shelves: ShelfUpdateManyWithoutUserNestedInput
  updatedAt: Timestamp
  userBooks: UserBookUpdateManyWithoutUserNestedInput
  username: String
}

input UserUpdateWithoutJournalEntriesInput {
  comments: CommentUpdateManyWithoutUserNestedInput
  createdAt: Timestamp
  email: String
  hashedPassword: String
  hashedRefreshToken: String
  id: String
  likedReviews: LikedReviewUpdateManyWithoutUserNestedInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  shelves: ShelfUpdateManyWithoutUserNestedInput
  updatedAt: Timestamp
  userBooks: UserBookUpdateManyWithoutUserNestedInput
  username: String
}

input UserUpdateWithoutLikedReviewsInput {
  comments: CommentUpdateManyWithoutUserNestedInput
  createdAt: Timestamp
  email: String
  hashedPassword: String
  hashedRefreshToken: String
  id: String
  journalEntries: JournalEntryUpdateManyWithoutUserNestedInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  shelves: ShelfUpdateManyWithoutUserNestedInput
  updatedAt: Timestamp
  userBooks: UserBookUpdateManyWithoutUserNestedInput
  username: String
}

input UserUpdateWithoutReviewsInput {
  comments: CommentUpdateManyWithoutUserNestedInput
  createdAt: Timestamp
  email: String
  hashedPassword: String
  hashedRefreshToken: String
  id: String
  journalEntries: JournalEntryUpdateManyWithoutUserNestedInput
  likedReviews: LikedReviewUpdateManyWithoutUserNestedInput
  shelves: ShelfUpdateManyWithoutUserNestedInput
  updatedAt: Timestamp
  userBooks: UserBookUpdateManyWithoutUserNestedInput
  username: String
}

input UserUpdateWithoutShelvesInput {
  comments: CommentUpdateManyWithoutUserNestedInput
  createdAt: Timestamp
  email: String
  hashedPassword: String
  hashedRefreshToken: String
  id: String
  journalEntries: JournalEntryUpdateManyWithoutUserNestedInput
  likedReviews: LikedReviewUpdateManyWithoutUserNestedInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  updatedAt: Timestamp
  userBooks: UserBookUpdateManyWithoutUserNestedInput
  username: String
}

input UserUpdateWithoutUserBooksInput {
  comments: CommentUpdateManyWithoutUserNestedInput
  createdAt: Timestamp
  email: String
  hashedPassword: String
  hashedRefreshToken: String
  id: String
  journalEntries: JournalEntryUpdateManyWithoutUserNestedInput
  likedReviews: LikedReviewUpdateManyWithoutUserNestedInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  shelves: ShelfUpdateManyWithoutUserNestedInput
  updatedAt: Timestamp
  username: String
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsInput!
  where: UserWhereInput
}

input UserUpsertWithoutJournalEntriesInput {
  create: UserCreateWithoutJournalEntriesInput!
  update: UserUpdateWithoutJournalEntriesInput!
  where: UserWhereInput
}

input UserUpsertWithoutLikedReviewsInput {
  create: UserCreateWithoutLikedReviewsInput!
  update: UserUpdateWithoutLikedReviewsInput!
  where: UserWhereInput
}

input UserUpsertWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput!
  update: UserUpdateWithoutReviewsInput!
  where: UserWhereInput
}

input UserUpsertWithoutShelvesInput {
  create: UserCreateWithoutShelvesInput!
  update: UserUpdateWithoutShelvesInput!
  where: UserWhereInput
}

input UserUpsertWithoutUserBooksInput {
  create: UserCreateWithoutUserBooksInput!
  update: UserUpdateWithoutUserBooksInput!
  where: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  hashedPassword: StringFilter
  hashedRefreshToken: StringFilter
  id: StringFilter
  journalEntries: JournalEntryListRelationFilter
  likedReviews: LikedReviewListRelationFilter
  reviews: ReviewListRelationFilter
  shelves: ShelfListRelationFilter
  updatedAt: DateTimeFilter
  userBooks: UserBookListRelationFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  email: String
  hashedPassword: StringFilter
  hashedRefreshToken: StringFilter
  id: String
  journalEntries: JournalEntryListRelationFilter
  likedReviews: LikedReviewListRelationFilter
  reviews: ReviewListRelationFilter
  shelves: ShelfListRelationFilter
  updatedAt: DateTimeFilter
  userBooks: UserBookListRelationFilter
  username: String
}